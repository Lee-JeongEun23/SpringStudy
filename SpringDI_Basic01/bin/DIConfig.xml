<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.springframework.org/schema/beans 
http://www.springframework.org/schema/beans/spring-beans.xsd">


<!--  
Spring은 자신만의 컨테이너를 제공 (IOC 컨테이너) 안에
[객체를 만들고 조립(관계... 의존성)] 설정

>> DIConfig.xml 문서를 read 해서 안에 있는 코드를 먼저 실행
>> xml 파일은 컨테이너를 구성하는 객체를 생성하고 의존을 설정하는 파일
또는 Annotation 통해서 컨테이너 자원 구성 ★권장

- 제어의 역전 (프로그램의 제어구조를 바꾼다) : 작은 단위의 부품을 만들어 놓고 그것을 조립하는 행위 (like, 레고 블럭)

//JavaCode
NewRecordView view = new NewRecordView(); //객체 생성
NewRecord record = new NewRecord();

view.setREcord(record); //객체 주입(DI)

코드 구현...
	private NewRecord record;
	public void setRecord(Record record) { //부모 코드로서 record의 모든 자식 객체 올 수 있음(다형성 적용 / 함수의 parameter interface)
		//함수의 parameter를 통해서 NewRecord 객체의 주소
		this.record = (NewRecord)record;
	}
	
위 같은 형태의 코드를 자바코드가 아닌 [설정(Annotation or XML)]을 통해서 작업 / 지금의 트렌드는 annotation

	public static void main(String[] args) {
		
		NewRecordView view = new NewRecordView();
		NewRecord record = new NewRecord();
		
		view.setRecord(record); //필요한 객체의 주소 주입 - 설정을 통해서 주입

	}

★★★<property name은 setter을 구현하는 멤버 필드의 이름을 쓰기
★★★ setRecord()의 private NewRecord record; 에서 멤버 필드명인 record 쓰기
-->

<bean id="record" class="Spring_DI4.NewRecord"></bean>
<!-- NewRecord record = new NewRecord(); -->
<bean id="view" class="Spring_DI4.NewRecordView">
	<property name="record" ref="record"></property> <!-- setter함수를 가리킴, setter을 구현하고 있는 멤버 필드명 // ref에는 주소값 주입 -->
</bean>
<!-- NewRecordView view = new NewRecordView(); -->
</beans>