<?xml version="1.0" encoding="UTF-8"?>
<beans  xmlns="http://www.springframework.org/schema/beans" 
		xmlns:context="http://www.springframework.org/schema/context" 
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
		xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context.xsd">
<!-- 
		//자바 코드
		MonitorViewer viewer = new MonitorViewer();
		Recorder recorder = new Recorder();
		
		viewer.setRecorder(recorder);
		
		<bean id="recorder" class="DI_Annotation_01.Recorder"></bean>
			<bean id="monitorViewer" class="DI_Annotation_01.MonitorViewer">
				<property name="recorder">
					<ref bean="recorder" />
				</property>
			</bean> 
	
		@Autowired > Type기반
		목적 : 의존관계를 자동설정할 때 사용하며 [타입을 이용]하여 의존하는 객체를 삽입해 준다. 
		그러므로 (IOC Container) 해당 타입의 빈객체가 존재하지 않거나 또는 2개 이상 존재할 경우 
		스프링은 예외를 발생시키게 된다. 
		설정 위치 : 생성자, 필드. 메소드 (굳이 setter 메소드가 아니어도 된다)
	
		★★ @Autowired 적용되기 위한 선행 작업
				
		<bean id="" class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"></bean> >> 얘는 각각
		<context:annotation-config /> >> 모든 것을 다 올려버림
		이 객체가 있어야지만 autowired 어노테이션을 사용할 수 있음
		어노테이션에 필요한 빈 객체를 한번에 만듦 
		<context:annotation-config />
		Annotation 사용에 필요한 모든 클래스 한방에 빈 객체로 생성
		단점) 사용하지 않는 bean도 다 등록함
		<bean id="" class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"></bean>
		 이처럼 class로 가져오지 않고 <context:annotation-config /> 으로 사용함, 또한 이는 페이지 상단에 있어야 함
		@Autowired 그냥 사용
		

		<bean id="recorder" class="DI_Annotation_01.Recorder"></bean>
			<bean id="monitorViewer" class="DI_Annotation_01.MonitorViewer">
			아래부분을 @AutoWired 구현 (Injection)
				<property name="recorder">
					<ref bean="recorder" />
				</property>
			</bean> 
			
		★★ @Autowired 정상 동작하지 않는 경구
		1. injection 되는 타입의 bean 객체가 IOC 컨테이너 안에 없는 경우(exception)
		2. IOC 컨테이너 안에 같은 타입의 bean 객체가 여러개 존재할 경우
		3. 그러나, IOC 컨테이너 안에 같은 타입의 bean 객체가 여러개 존재하더라도 
		private Recorder recorder;
		public void setRecorder(Recorder recorder)
		set 함수의 parameter 이름이 <bean 아이디와 같으면 > 예외없이 처리 가능 // 원칙) @Resource (by name)
 -->
 <context:annotation-config /> 
 		<!--  <context:component-scan base-package="kr.or.bit.commons"></context:component-scan> -->
		<bean id="recorder" class="DI_Annotation_01.Recorder"></bean> 
		<bean id="monitorViewer" class="DI_Annotation_01.MonitorViewer"></bean>
		<bean id="a" class="DI_Annotation_01.Recorder"></bean>
		<bean id="b" class="DI_Annotation_01.Recorder"></bean>
		<bean id="c" class="DI_Annotation_01.Recorder"></bean>
</beans>

 
 
 
 